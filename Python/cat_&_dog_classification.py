# -*- coding: utf-8 -*-
"""Cat VS Dog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/26Kenn07/Deep-Learning/blob/main/Cat%20VS%20Dog.ipynb
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d salader/dogs-vs-cats

import zipfile
zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Dropout

#Generators
train = keras.utils.image_dataset_from_directory(
    directory = '/content/train',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)

)

#Generators
test = keras.utils.image_dataset_from_directory(
    directory = '/content/test',
    labels = 'inferred',
    label_mode = 'int',
    batch_size = 32,
    image_size = (256,256)

)

def PreProcess(img,label):
  img = tf.cast(img/255.,tf.float32)
  return img,label

train = train.map(PreProcess)
test = test.map(PreProcess)

#CNN model
#To overcome overfitting will do Dropout and Batch-Normalization

model = Sequential()

model.add(Conv2D(32, (3,3), activation ='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D((2,2),strides=2))

model.add(Conv2D(64, (3,3), activation ='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2,2),strides=2))

model.add(Conv2D(128, (3,3), activation ='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2,2),strides=2))

model.add(Conv2D(256, (3,3), activation ='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2,2),strides=2))

model.add(Flatten())

model.add(Dense(256,activation='relu'))
model.add(Dropout(0.1))

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.1))

model.add(Dense(64,activation='relu'))
model.add(Dropout(0.1))

model.add(Dense(32,activation='relu'))
model.add(Dropout(0.1))

model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(train,epochs=10,validation_data = test)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

import cv2

img = cv2.imread('/content/Unknown.jpg')

plt.imshow(img)

img.shape

img = cv2.resize(img,(256,256))

input = img.reshape((1,256,256,3))

model.predict(input)

img2 = cv2.imread('/content/Unknown2.jpg')

plt.imshow(img2)

img2.shape

img2 = cv2.resize(img2,(256,256))

input2 = img2.reshape((1,256,256,3))

model.predict(input2)

